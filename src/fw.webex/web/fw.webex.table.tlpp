/*
  __                            _
 / _|__      ____      __  ___ | |__    ___ __  __
| |_ \ \ /\ / /\ \ /\ / / / _ \| '_ \  / _ \\ \/ /
|  _| \ V  V /  \ V  V / |  __/| |_) ||  __/ >  <
|_|    \_/\_/    \_/\_/   \___||_.__/  \___|/_/\_\

Released to Public Domain.
--------------------------------------------------------------------------------------
*/

namespace FWWebEx

#include "fw.webex.th"

class WebExTable from WebExControl

    public data cTitle as character

    public data jHeader as json
    public data jDetail as json

    public data lExpandable as logical
    public data lTitleBefore as logical

    public data oTHead as object
    public data oTBody as object

    public method New(cTitle) as object
    public method SetTitle(cTitle) as object
    public method SetTitleBefore(lTitleBefore) as object
    public method AddColumnHeader(cLabel as character) as object
    public method BuildHeader() as object
    public method AddCell(xValue as variant) as object
    public method BuildBodyRow() as object
    public method EnableDrillDown() as object
    public method RenderHTML() as character

endclass

method New(cTitle) class WebExTable
    paramtype 1 var cTitle as character optional
    _Super:New("table")
    ::SetTitle(cTitle)
    ::SetTitleBefore(.T.)
    ::AddClass("table")
    ::AddClass("table-striped")
    ::AddClass("table-hover")
    ::jHeader:=JSONObject():New()
    ::jDetail:=JSONObject():New()
    ::lExpandable:=.F.
    ::oTBody:=WebExControl():New("tbody")
    ::oTHead:=WebExControl():New("thead")
return(self)

method SetTitle(cTitle) class WebExTable
    paramtype 1 var cTitle as character optional default ""
    ::cTitle:=cTitle
return(self)

method SetTitleBefore(lTitleBefore) class WebExTable
    paramtype 1 var lTitleBefore as logical optional default .F.
    ::lTitleBefore:=lTitleBefore
return(self)

method AddColumnHeader(cLabel) class WebExTable
    local oTH:=WebExControl():New("th") as object
    paramtype 1 var cLabel as character
    oTH:SetContent(cLabel)
    ::jHeader[oTH:cID]:=oTH
return(oTH)

method BuildHeader() class WebExTable
    local oTH as object
    local oTR:=WebExControl():New("tr") as object
    if (::lExpandable)
        oTH:=WebExControl():New("th")
        oTH:SetContent("")
        oTR:AddChild(oTH)
    endif
    aEval(::jHeader:GetNames(),{|cName|oTR:AddChild(::jHeader[cName])})
    ::oTHead:AddChild(oTR)
    ::jHeader:=JSONObject():New()
return(self)

method AddCell(xValue) class WebExTable
    local oTD:=WebExControl():New("td") as object
    oTD:SetContent(cValToChar(xValue))
    ::jDetail[oTD:cID]:=oTD
return(oTD)

method BuildBodyRow(cDataHTML) class WebExTable
    local cIDPrefix as character
    local oTD as object
    local oTR:=WebExControl():New("tr") as object
    local oButton as object
    if (::lExpandable)
        paramtype 1 var cDataHTML as character optional
        cIDPrefix:=::cID
        oButton:=WebExControl():New("button")
        oButton:AddClass("btn")
        oButton:AddClass("btn-sm")
        oButton:AddClass("btn-primary")
        oButton:SetAttr("onclick",cIDPrefix+"_expandRow(this)")
        if (!Empty(cDataHTML))
            oButton:SetAttr("data-html",cDataHTML)
        endif
        oButton:SetContent("+")
        oTD:=WebExControl():New("td")
        oTD:AddChild(oButton)
        oTR:AddChild(oTD)
    endif
    aEval(::jDetail:GetNames(),{|cName|oTR:AddChild(::jDetail[cName])})
    ::oTBody:AddChild(oTR)
    ::jDetail:=JSONObject():New()
return(self)

method EnableDrillDown() class WebExTable
    ::lExpandable:=.T.
return(self)

method RenderHTML() class WebExTable

    local cHTML as character
    local cScript as character

    local oScript as object
    local oCaption as object

    if (!Empty(::cTitle))
        ::AddClass(if(::lTitleBefore,"caption-top","caption-bottom"))
        oCaption:=WebExControl():New("caption")
        oCaption:AddClass("text-center")
        oCaption:AddClass("fw-bold")
        oCaption:SetContent(::cTitle)
        ::AddChild(oCaption)
    endif

    ::AddChild(::oTHead)
    ::AddChild(::oTBody)

    if (::lExpandable)
        // Adiciona script de expandRow com ID prefixado
        oScript:=WebExControl():New("script")
        beginContent var cScript
            //TODO: fetch real content via AJAX and update td.innerHTML
            function ::cID_expandRow(button) {
            const tr = button.closest('tr');
            if (tr.nextSibling && tr.nextSibling.classList.contains('child-row')) {
                tr.nextSibling.remove();
                button.innerText = '+';
                return;
            }
            const td = document.createElement('td');
            td.colSpan = tr.children.length;
            td.innerHTML = button.getAttribute('data-html') || '<div class=\"text-muted\">Loading...</div>';
            const newRow = document.createElement('tr');
            newRow.classList.add('child-row');
            newRow.appendChild(td);
            tr.parentNode.insertBefore(newRow, tr.nextSibling);
            button.innerText = '-';
            }
        endContent
        cScript:=StrTran(cScript,"::cID",::cID)
        oScript:SetContent(cScript)
        ::AddChild(oScript)
    endif

    cHTML:=_Super:RenderHTML()

return(cHTML)
