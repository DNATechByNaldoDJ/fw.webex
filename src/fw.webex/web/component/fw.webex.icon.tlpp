/*
  __                            _
 / _|__      ____      __  ___ | |__    ___ __  __
| |_ \ \ /\ / /\ \ /\ / / / _ \| '_ \  / _ \\ \/ /
|  _| \ V  V /  \ V  V / |  __/| |_) ||  __/ >  <
|_|    \_/\_/    \_/\_/   \___||_.__/  \___|/_/\_\

Released to Public Domain.
--------------------------------------------------------------------------------------
*/

namespace FWWebEx

#include "fw.webex.th"

class WebExIcon from WebExControl

    protected data cIconName as character
    protected data cIconType as character
    protected data cIconSize as character

    public method New(cIconName as character,cIconType as character) as object

    public method GetIconType() as character
    public method SetIconType(cIconType as character) as object

    public method GetIconSize() as character
    public method SetIconSize(cIconSize as character) as object

    public method GetIconName() as character
    public method SetIconName(cIconName as character) as object


endclass

method New(cIconName,cIconType) class WebExIcon
    paramtype 1 var cIconName as character
    paramtype 2 var cIconType as character optional default "bootstrap"
    ::SetIconType(cIconType)
    ::cIconName:=cIconName
    _Super:New("i")
    _Super:SetEnableIcons()
    ::SetIconName(cIconName,cIconType)
return(self)

method GetIconType() class WebExIcon
return(::cIconType)

method SetIconType(cIconType) class WebExIcon
    ::cIconType:=Lower(AllTrim(cIconType))
return(self)

method GetIconName() class WebExIcon
return(::cIconName)

method SetIconName(cIconName,cIconType) class WebExIcon

    paramtype 1 var cIconName as character
    paramtype 2 var cIconType as character optional default ::cIconType

    ::cIconName:=cIconName

    cIconType:=Lower(cIconType)

    // Remove classes anteriores
    if (::cIconType!=cIconType)
        do case
        case (::cIconType=="bootstrap")
            ::DelClass("bi")
            ::DelClass(::cIconName)
        case (::cIconType=="material")
            ::DelClass("material-icons")
        case (::cIconType=="fontawesome")
            ::DelClass("fa")
            ::DelClass(::cIconName)
        endcase
        ::cIconType:=cIconType
    endif

    // Adiciona classes novas conforme tipo
    do case
    case (::cIconType=="bootstrap")
        ::AddClass("bi")
        ::AddClass(::cIconName)
    case (::cIconType=="material")
        ::AddClass("material-icons")
        ::SetContent(::cIconName)
    case (::cIconType=="fontawesome")
        ::AddClass("fa")
        ::AddClass(::cIconName)
    endcase

return(self)

method GetIconSize() class WebExIcon
return(::cIconSize)

method SetIconSize(cIconSize) class WebExIcon
    paramtype 1 var cIconSize as character
    ::cIconSize:=cIconSize
    if (::cIconType=="bootstrap")
        ::AddClass("fs-"+::cIconSize)
    elseif (::cIconType=="fontawesome")
        // aceita 1x, 2x, 3x ate 10x (validar antes?)
        ::AddClass("fa-"+::cIconSize)
    elseif (::cIconType=="material")
        ::AddClass("md-"+::cIconSize)
    endif
return(self)
