/*
  __                            _
 / _|__      ____      __  ___ | |__    ___ __  __
| |_ \ \ /\ / /\ \ /\ / / / _ \| '_ \  / _ \\ \/ /
|  _| \ V  V /  \ V  V / |  __/| |_) ||  __/ >  <
|_|    \_/\_/    \_/\_/   \___||_.__/  \___|/_/\_\

Released to Public Domain.
--------------------------------------------------------------------------------------
*/

#include "fw.webex.th"

#include "tlpp-core.th"
#include "tlpp-rest.th"

using namespace FWWebEx

procedure u_FWWebExExample_007()
    local bExecute as codeblock
    local cHTML as character
    local cHTMLFile as character
    local cProcName:=ProcName() as character
    bExecute:={||FWMsgRun(nil,{||cHTMLFile:=FWWebExExample_007(@cHTML)},"Aguarde",cProcName)}
    FWExampleTools():Execute(bExecute,cProcName,.T.)
    if (File(cHTMLFile))
        FWExampleTools():htmlFileShow(cHTML,cProcName,cHTMLFile)
        fErase(cHTMLFile)
    endif
return

static procedure FWWebExExample_007(cHTML as character) as character

    local cHTMLFile as character

    local cUSR as character
    local cPDW as character
    local cScript as character
    local cRESTURL as character
    local cProcName:=ProcName() as character
    local cDNATechAuth as character
    local cAutorization as character
    local cRESTURLOAuth2 as character

    local joAuth2 as json

    local oDivTable as object
    local oTableStyle as object

    local oFWWebExPage as object
    local oFWWebExScript as object

    if (!FWExampleTools():GetRESTCredential(@cUSR,@cPDW,@cRESTURL,@cRESTURLOAuth2,@joAuth2))
        return
    endif

    if ((valType(joAuth2)=="J").and.(joAuth2:HasProperty("access_token")))
        cAutorization:="Bearer "+joAuth2["access_token"]
    else
        cAutorization:="Basic "+Encode64(cUSR+":"+cUSR)
    endif

    oFWWebExPage:=WebExPage():New("Exemplo 007 - Funcionarios (REST + DataTable)")
    oTableStyle:=WebExControl():New("style")

    beginContent var cTableStyle
        table.dataTable.compact tbody td {
            padding: 4px 8px !important;
        }
        #custom-loader {
            position: absolute !important;
            top: 0 !important;
            left: 0 !important;
            right: 0 !important;
            height: 4px !important;
            background: linear-gradient(270deg, #0dcaf0, #0d6efd) !important;
            animation: progressbar-stripes 1s linear infinite !important;
        }
        @keyframes progressbar-stripes {
        0% { background-position: 1rem 0; }
        100% { background-position: 0 0; }
        }
    endContent
    oTableStyle:SetContent(cTableStyle)
    oFWWebExPage:AddChild(oTableStyle)

    oFWWebExScript:=WebExScript():New()

    // Adiciona container de tabela
    oDivTable:=WebExControl():New("div")
    oDivTable:SetAttr("id","tableResult")
    oFWWebExPage:AddChild(oDivTable)

    /*
        Tabela do DOM (so pra referencia)
        https://datatables.net/reference/option/dom
        | Letra | Elemento que aparece           |
        | ----- | ------------------------------ |
        | **B** | Botoes (exportacao etc.)       |
        | **l** | Seletor de "linhas por pagina" |
        | **f** | Campo de busca (filtro)        |
        | **r** | Texto "processing..."          |
        | **t** | Tabela                         |
        | **i** | Info de "Mostrando x a y de z" |
        | **p** | Paginacao                      |
    */
    // Script com server-side pagination ativado
    beginContent var cScript
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('tableResult').innerHTML = `
                <div id="custom-loader" style="display:none; width: 100%;">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary" style="width: 100%">
                            Carregando...
                        </div>
                    </div>
                </div>
                <table id="example" class="table table-striped table-hover display compact nowrap">
                    <thead>
                        <tr>
                            <th>Filial</th>
                            <th>Matr&iacute;cula</th>
                            <th>Apelido</th>
                            <th>Centro de Custo</th>
                            <th>Sal&aacute;rio</th>
                            <th>Adt.Servi&ccedil;o</th>
                            <th>Cat.Func.</th>
                            <th>Sexo</th>
                        </tr>
                    </thead>
                </table>`;
            const table = new DataTable('#example', {
                serverSide: true,
                processing: false,
                dom: 'Blfrtip',
                lengthMenu: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,25,30,35,40,45,50,100,-1],
                pageLength: 10,//DEFAULT
                buttons: [
                    'copy',
                    'csv',
                    'print',
                    {
                        extend: 'excelHtml5',
                        title: 'u_FWWebExExample_007',
                        filename: 'relatorio_excel',
                        autoFilter: true
                    },
                    {
                        extend: 'pdf',
                        title: 'u_FWWebExExample_007',
                        filename: 'relatorio_pdf'
                    }
                ],
                responsive: true,
                className: 'compact',
                language: {
                    url: 'https://cdn.datatables.net/plug-ins/2.3.2/i18n/pt-BR.json',
                    lengthLabels: {
                        '-1': 'Todos' //https://datatables.net/reference/option/lengthMenu
                    }
                },
                "preDrawCallback": function(settings) {
                    $('#custom-loader').show();
                },
                "drawCallback": function(settings) {
                    $('#custom-loader').hide();
                    // This drawCallback ensures consistent table height across pages.
                    // It calculates how many empty rows are needed to fill the remaining space,
                    // and appends them to the table so all pages have the same visual height.
                    const api = this.api();
                    const rows = api.rows({ page: 'current' }).count();
                    const pageSize = api.page.len();
                    const emptyRows = pageSize - rows;
                    for (let i = 0; i < emptyRows; i++) {
                        $('#example tbody').append('<tr class="empty-row"><td colspan="999">&nbsp;</td></tr>');
                    }
                },
                ajax: function (data, callback) {
                    const pageNumber = Math.floor(data.start / data.length) + 1;
                    const rowsPerPage = data.length === -1 ? 999999 : data.length;
                    fetch('https://localhost:9898/rest/callProcRestCrudTLPP/post/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': <Autorization>,
                            'X-DNATech-Auth-Token': <DNATechAuth>
                        },
                        body: JSON.stringify({
                            ClassName: 'userRestCrudTLPPCoreFunction',
                            FunctionName: 'dna.tech.codAliasPost',
                            codAlias: 'SRA',
                            yesFields: 'RA_FILIAL,RA_MAT,RA_APELIDO,RA_CC,RA_SALARIO,RA_ADTPOSE,RA_CATFUNC,RA_DEPIR,RA_SEXO',
                            Filter: {
                                RA_SEXO: 'M'
                            },
                            PageNumber: pageNumber,
                            RowspPage: rowsPerPage,
                            cEmp: '99',
                            cFil: '01',
                            lChkPrepEnv: false,
                            lHTTPCTLen: true,
                            lFWHTTpEncode: true,
                            cHTTPCTType: 'application/json; charset=UTF-8',
                            lHTTPCTType: true
                        })
                    })
                    .then(res => {
                        if (!res.ok) throw new Error('HTTP ' + res.status);
                        return res.text();
                    })
                    .then(text => {
                        console.log('RAW response:', text);
                        const json = JSON.parse(text);
                        if (!json.table || !json.table.items) throw new Error('JSON incompleto');
                        const rows = json.table.items.map(row => {
                            const i = row.detail.items;
                            return [
                                        i.RA_FILIAL || '',
                                        i.RA_MAT || '',
                                        i.RA_APELIDO || '',
                                        i.RA_CC || '',
                                        i.RA_SALARIO || '',
                                        i.RA_ADTPOSE || '',
                                        i.RA_CATFUNC || '',
                                        i.RA_DEPIR || '',
                                        i.RA_SEXO || ''
                                    ];
                        });
                        callback({
                            data: rows,
                            recordsTotal: json.TotalRows,
                            recordsFiltered: json.TotalRows
                        });
                    })
                    .catch(err => console.error('Erro ao carregar dados:', err));
                }
            });
             //captura do evento de processamento
            table.on('processing.dt', function (e, settings, processing) {
                if (processing) {
                    $('#custom-loader').show();
                } else {
                    $('#custom-loader').hide();
                }
            });
        });
    endContent

    if (!FindClass("DNA.TECH.USERRESTCRUDTLPP"))
        //Considerando que callProcRestCrudTLPP depende de DNA.TECH.USERRESTCRUDTLPP
        //u_callProcRestCrudTLPPEx007 atuara como um mock da callProcRestCrudTLPP.
        cScript:=StrTran(cScript,"callProcRestCrudTLPP","u_callProcRestCrudTLPPEx007")
    else
        cDNATechAuth:=MemoRead("\dna.tech\authentication\authentication.aut")
        cDNATechAuth:=Encode64("token:"+cDNATechAuth)
        cScript:=StrTran(cScript,"<DNATechAuth>","'"+cDNATechAuth+"'")
    endif
    cScript:=StrTran(cScript,"<Autorization>","'"+cAutorization+"'")
    cScript:=StrTran(cScript,"https://localhost:9898/rest/",cRESTURL)

    oFWWebExScript:SetContent(cScript)
    oFWWebExPage:AddChild(oFWWebExScript)
    *oFWWebExPage:SetAttr("style","min-height:100vh;padding:1rem;box-sizing:border-box;overflow:auto;")
    oFWWebExPage:EnableDataTable()

    cHTMLFile:=cProcName
    WebFileTools():HTMLFromControl(oFWWebExPage,"\web\tmp\",@cHTMLFile,@cHTML,.T.)

    oFWWebExPage:Clean()

    FreeObj(@oFWWebExPage)
    FreeObj(@oFWWebExScript)
    FreeObj(@oDivTable)
    FreeObj(@oTableStyle)

return(cHTMLFile)
