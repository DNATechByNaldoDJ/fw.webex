/*
  __                            _
 / _|__      ____      __  ___ | |__    ___ __  __
| |_ \ \ /\ / /\ \ /\ / / / _ \| '_ \  / _ \\ \/ /
|  _| \ V  V /  \ V  V / |  __/| |_) ||  __/ >  <
|_|    \_/\_/    \_/\_/   \___||_.__/  \___|/_/\_\

Released to Public Domain.
--------------------------------------------------------------------------------------
*/

namespace FWWebEx

static __aVoidTags:={"area","base","br","col","embed","hr","img","input","link","meta","source","track","wbr"} as array

#include "fw.webex.th"

#include "parmtype.ch"

class WebExControl

    public data cID as character
    public data cType as character
    public data cContent as character

    public data jAttrs as json
    public data jChildren as json

    public method New(cType as character) as object
    public method NewID() as character

    public method ClassName() as character

    public method SetAttr(cKey as character,uValue as variant) as object
    public method GetAttr(cAttr) as character

    public method SetContent(cContent as character) as object

    public method AddChild(oChild as object) as object

    public method RenderHTML() as character

    public method AddClass(cNewClass as character) as object
    public method HasClass(/*[@]*/cClass as character,/*@*/aClasses as array) as logical
    public method RemoveClass(cClassRemove as character) as object

endclass

method New(cType) class WebExControl
    paramtype 1 var cType as character optional default "div"
    ::cID:=self:NewID()
    ::cType:=cType
    ::cContent:="__NULL__"
    ::jAttrs:=JSONObject():New()
    ::jChildren:=JSONObject():New()
return(self)

method NewID() class WebExControl
return((StrTran(Lower(GetClassName(self)),".","_")+"_"+UUIDRandom()))

method ClassName() class WebExControl
    local cClassName:=GetClassName(self)
    //Remove NameSpace. PARMTYPE.CH, ainda, nao tem suporte para NameSpace.
    cClassName:=StrTran(cClassName,"FWWEBEX.","")
return(cClassName)

method SetAttr(cKey,uValue) class WebExControl
   paramtype 1 var cKey as character
   paramtype 2 var uValue as array,character,date,json,logical,numeric optional default cKey
   ::jAttrs[cKey]:=uValue
return(self)

method GetAttr(cAttr) class WebExControl
    local cGetAttr as character
    paramtype 1 var cAttr as character
    if (::jAttrs:HasProperty(cAttr))
        cGetAttr:=::jAttrs[cAttr]
    else
        cGetAttr:=""
    endif
return(cGetAttr)

method SetContent(cContent) class WebExControl
   paramtype 1 var cContent as character
   ::cContent:=cContent
return(self)

method AddChild(oChild) class WebExControl
    local cClassName as character
    paramtype 1 var oChild as object
    cClassName:=GetClassName(self)
    if (!Left(cClassName,8)=="FWWEBEX.")
        CLASSPARAMEXCEPTION PARAM 1 VAR oChild TEXT cClassName MESSAGE "Only FWWEBEX.WebExControl-based objects can be added here. Nice try though."
    endif
    ::jChildren[oChild:cID]:=oChild
return(self)

method RenderHTML() class WebExControl

    local aAttrs as array
    local aChildren as array

    local cKey as character
    local cHTML as character
    local cLowerType as character

    local nAttr as numeric
    local nAttrs as numeric

    local nChild as numeric
    local nChilds as numeric

    local xVal as variant

    // Garante que tenha um ID unico
    if (!::jAttrs:HasProperty("id"))
        ::jAttrs["id"]:=::cID
    endif

    cLowerType:=Lower(::cType)

    cHTML:="<"+::cType

        if (cLowerType!="!--")
            aAttrs:=::jAttrs:GetNames()
            nAttrs:=Len(aAttrs)
            for nAttr:=1 to nAttrs
                cKey:=aAttrs[nAttr]
                if (::jAttrs:HasProperty(cKey))
                    xVal:=::jAttrs[cKey]
                    if (valType(xVal)!="C")
                        xVal:=cValToChar(xVal)
                    endif
                    if (cKey==xVal)
                        cHTML+=" "+cKey
                    else
                        cHTML+=" "+cKey+'="'+xVal+'"'
                    endif
                endif
            next nAttr
        endif

    if (aScan(__aVoidTags,{|cType|(cType==cLowerType)})>0)

        cHTML+="/>"

    else

        if (cLowerType!="!--")
            cHTML+=">"
        endif

        aChildren:=::jChildren:GetNames()
        nChilds:=Len(aChildren)
        if (nChilds>0)
            for nChild:=1 to nChilds
                cKey:=aChildren[nChild]
                if (::jChildren:HasProperty(cKey))
                    oChild:=::jChildren[cKey]
                    if (valType(oChild)=="O")
                        cHTML+=oChild:RenderHTML()
                    endif
                endif
            next nChild
        elseif (::cContent!="__NULL__")
            cHTML+=::cContent
        endif

        if (cLowerType!="!--")
            cHTML+="</"+::cType+">"
        else
            cHTML+="-->"
        endif

    endif

return(cHTML)

method AddClass(cNewClass) class WebExControl
   local cClass as character
   paramtype 1 var cNewClass as character
   cClass:=AllTrim(::GetAttr("class"))
   if (Empty(cClass))
      ::SetAttr("class",cNewClass)
   else
      ::SetAttr("class",cClass+" "+cNewClass)
   endif
return(self)

method HasClass(cClass,aClasses) class WebExControl
    local aClasses as array
    local lHasClass as logical
    local nATClass as numeric
    paramtype 1 var cClass as character
    paramtype 2 var aClasses as array optional
    aClasses:=StrTokArr2(Lower(AllTrim(::GetAttr("class")))," ")
    cClass:=Lower(AllTrim(cClass))
    nATClass:=aScan(aClasses,{|cToken as character|(cToken==cClass)})
    lHasClass:=(nATClass>0)
return(lHasClass)

method RemoveClass(cClassRemove) class WebExControl

    local aClasses as array

    local cClass as character
    local cNewClass as character

    local oForEach as object

    paramtype 1 var cClass as character

    if (::HasClass(@cClassRemove,@aClasses))
        cNewClass:=""
        oForEach:=ForEach():New(aClasses,{|k as numeric,v as character,i as numeric|;
            cNewClass+=if(!(v==cClassRemove),v,""),;
            cNewClass+=if(!oForEach:__enumIsLast()," ","");
            },;
            .F.;
        )
        oForEach:Eval()
        FreeObj(@oForEach)
        cNewClass:=AllTrim(cNewClass)
        ::SetAttr("class",cNewClass)
    endif

    FWFreeArray(@aClasses)

return(self)
